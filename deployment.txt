>>> Activate Virtual Environment
cd ~/Desktop/DojoAssignments/myEnvironments/

>>> Navigate to 
cd ~/Documents/coding/{{project}}
pip freeze > requirements.txt

>>> In your text editor, open your requirements.txt file and, if they exist, remove pygraphviz, pydot and anything with MySQL in it. 

>>> See manage.py
ls
touch .gitignore

>>> Open .gitignore
*.pyc
venv/

>>> Initialize Repo
git init
git add --all
git commit -m "initialize commit"

>>> https://github.com/ylindesign?tab=repositories 
>>> Start a new repo and copy link SIMILAR TO BELOW:
git remote add origin https://github.com/AnnaBNana/courses.git
git push origin master

>>> https://aws.amazon.com/
>>> EC2
>>> Launch Instance
>>> Select Ubuntu Server 16.04 Option
>>> Select t2.micro option and click Review and Launch
>>> Click the Edit security groups link in the lower right corner
>>> SSH option should be there already. Reset SSH source from the dropdown menu to MyIP
>>> Click the add a rule button twice to add HTTP and HTTPS, source set to Anywhere, and then click Click Review and Launch

>>> Create a New Key Pair
>>> Name Key Pair
>>> Download Key Pair
>>> Launch Instance

>>> Put Key Pair in aws folder

cd ~/Documents/coding/aws

>>> Scroll to bottom and View Instance
>>> Name the instance


>>> Click Connect and use the supplied code in your terminal
(Step 3)
(Example)
yes

cd ~/Documents/coding/{{project}}??

>>> Look like: 
ubuntu@54.162.31.253:~$ #Commands you write appear here

ubuntu@54.162.31.253:~$ sudo apt-get update
ubuntu@54.162.31.253:~$ sudo apt-get install python-pip python-dev nginx git

ubuntu@54.162.31.253:~$ sudo apt-get update
ubuntu@54.162.31.253:~$ sudo pip install virtualenv

>>> Get Repo Link from GitHub
ubuntu@ip-my-ip:~$ git clone https://github.com/AnnaBNana/courses.git

>>> Navigate into {{projectName}}

ls

>>> If you don’t see manage.py as one of the files, STOP. Review the setting up GitHub/Git pieces from earlier.

>>> If everything looks good, let’s make that virtual environment, and activate it

ubuntu@54.162.31.253:~/myRepoName$ virtualenv venv
ubuntu@54.162.31.253:~/myRepoName$ source venv/bin/activate
(venv)ubuntu@54.162.31.253:~/myRepoName$ pip install -r requirements.txt
(venv) ubuntu@54.162.31.253:~/myRepoName$ pip install django bcrypt django-extensions
(venv) ubuntu@54.162.31.253:~/myRepoName$ pip install gunicorn

>>> Navigate to where settings.py lives
(venv) ubuntu@54.162.31.253:~/myRepoName$ cd {{projectName}}
(venv) ubuntu@54.162.31.253:~/myRepoName/projectName$ sudo vim settings.py

i

# Inside settings.py
# modify these lines
DEBUG = False
ALLOWED_HOSTS = ['{{yourEC2.public.ip}}']
# add the line below to the bottom of the file
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

esc
:wq

>>> Run cd .. to get back to the folder that holds manage.py. Make sure your virtual environment is activated!

(venv) ubuntu@54.162.31.253:~myRepoName$ python manage.py collectstatic #say yes

yes

(venv) ubuntu@54.162.31.253:~myRepoName$ gunicorn --bind 0.0.0.0:8000 {{projectName}}.wsgi:application

>>> If your Gunicorn process ran correctly, you will see something like the following printed to the terminal:
[2016-12-27 05:45:56 +0000] [8695] [INFO] Starting gunicorn 19.6.0
[2016-12-27 05:45:56 +0000] [8695] [INFO] Listening at: http://0.0.0.0:8000 (8695)
[2016-12-27 05:45:56 +0000] [8695] [INFO] Using worker: sync
[2016-12-27 05:45:56 +0000] [8700] [INFO] Booting worker with pid: 8700

ctrl-c
deactivate

ubuntu@54.162.31.253:~myRepoName$ sudo vim /etc/systemd/system/gunicorn.service

i

[Unit]
Description=gunicorn daemon
After=network.target
[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/{{repoName}}
ExecStart=/home/ubuntu/{{repoName}}/venv/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/{{repoName}}/{{projectName}}.sock {{projectName}}.wsgi:application
[Install]
WantedBy=multi-user.target

>>> REMINDER: myRepoName is the name of the repo you cloned. projectName is the name of the folder that was used when you ran the django-admin startproject command. This folder is sibling to your apps folder.

cd ..

ubuntu@54.162.31.253:~$ sudo systemctl daemon-reload
ubuntu@54.162.31.253:~$ sudo systemctl start gunicorn
ubuntu@54.162.31.253:~$ sudo systemctl enable gunicorn

ubuntu@54.162.31.253:~$ sudo vim /etc/nginx/sites-available/{{projectName}}

i

server {
  listen 80;
  server_name {{yourEC2.public.ip}};
  location = /favicon.ico { access_log off; log_not_found off; }
  location /static/ {
      root /home/ubuntu/{{myRepoName}};
  }
  location / {
      include proxy_params;
      proxy_pass http://unix:/home/ubuntu/{{myRepoName}}/{{projectName}}.sock;
  }
}

esc
:wq

ubuntu@54.162.31.253:~$ sudo ln -s /etc/nginx/sites-available/{{projectName}} /etc/nginx/sites-enabled
ubuntu@54.162.31.253:~$ sudo nginx -t

ubuntu@54.162.31.253:~$ sudo rm /etc/nginx/sites-enabled/default

54.162.31.253:~$ sudo service nginx restart